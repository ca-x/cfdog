// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package main

import (
	"context"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "cfdog/CloudflareUpdateExecutor",
		Iface: reflect.TypeOf((*CloudflareUpdateExecutor)(nil)).Elem(),
		Impl:  reflect.TypeOf(cloudflareUpdateExecute{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return cloudflareUpdateExecutor_local_stub{impl: impl.(CloudflareUpdateExecutor), tracer: tracer, executeMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cfdog/CloudflareUpdateExecutor", Method: "Execute", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return cloudflareUpdateExecutor_client_stub{stub: stub, executeMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cfdog/CloudflareUpdateExecutor", Method: "Execute", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return cloudflareUpdateExecutor_server_stub{impl: impl.(CloudflareUpdateExecutor), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return cloudflareUpdateExecutor_reflect_stub{caller: caller}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:      "github.com/ServiceWeaver/weaver/Main",
		Iface:     reflect.TypeOf((*weaver.Main)(nil)).Elem(),
		Impl:      reflect.TypeOf(app{}),
		Listeners: []string{"lis"},
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return main_local_stub{impl: impl.(weaver.Main), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any { return main_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return main_server_stub{impl: impl.(weaver.Main), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return main_reflect_stub{caller: caller}
		},
		RefData: "⟦7a21e734:wEaVeReDgE:github.com/ServiceWeaver/weaver/Main→cfdog/CloudflareUpdateExecutor⟧\n⟦d535aefb:wEaVeRlIsTeNeRs:github.com/ServiceWeaver/weaver/Main→lis⟧\n",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[CloudflareUpdateExecutor] = (*cloudflareUpdateExecute)(nil)
var _ weaver.InstanceOf[weaver.Main] = (*app)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*cloudflareUpdateExecute)(nil)
var _ weaver.Unrouted = (*app)(nil)

// Local stub implementations.

type cloudflareUpdateExecutor_local_stub struct {
	impl           CloudflareUpdateExecutor
	tracer         trace.Tracer
	executeMetrics *codegen.MethodMetrics
}

// Check that cloudflareUpdateExecutor_local_stub implements the CloudflareUpdateExecutor interface.
var _ CloudflareUpdateExecutor = (*cloudflareUpdateExecutor_local_stub)(nil)

func (s cloudflareUpdateExecutor_local_stub) Execute(ctx context.Context) (err error) {
	// Update metrics.
	begin := s.executeMetrics.Begin()
	defer func() { s.executeMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.CloudflareUpdateExecutor.Execute", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Execute(ctx)
}

type main_local_stub struct {
	impl   weaver.Main
	tracer trace.Tracer
}

// Check that main_local_stub implements the weaver.Main interface.
var _ weaver.Main = (*main_local_stub)(nil)

// Client stub implementations.

type cloudflareUpdateExecutor_client_stub struct {
	stub           codegen.Stub
	executeMetrics *codegen.MethodMetrics
}

// Check that cloudflareUpdateExecutor_client_stub implements the CloudflareUpdateExecutor interface.
var _ CloudflareUpdateExecutor = (*cloudflareUpdateExecutor_client_stub)(nil)

func (s cloudflareUpdateExecutor_client_stub) Execute(ctx context.Context) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.executeMetrics.Begin()
	defer func() { s.executeMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.CloudflareUpdateExecutor.Execute", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 0, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type main_client_stub struct {
	stub codegen.Stub
}

// Check that main_client_stub implements the weaver.Main interface.
var _ weaver.Main = (*main_client_stub)(nil)

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.24.5 (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type cloudflareUpdateExecutor_server_stub struct {
	impl    CloudflareUpdateExecutor
	addLoad func(key uint64, load float64)
}

// Check that cloudflareUpdateExecutor_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*cloudflareUpdateExecutor_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s cloudflareUpdateExecutor_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Execute":
		return s.execute
	default:
		return nil
	}
}

func (s cloudflareUpdateExecutor_server_stub) execute(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Execute(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type main_server_stub struct {
	impl    weaver.Main
	addLoad func(key uint64, load float64)
}

// Check that main_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*main_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s main_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

// Reflect stub implementations.

type cloudflareUpdateExecutor_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that cloudflareUpdateExecutor_reflect_stub implements the CloudflareUpdateExecutor interface.
var _ CloudflareUpdateExecutor = (*cloudflareUpdateExecutor_reflect_stub)(nil)

func (s cloudflareUpdateExecutor_reflect_stub) Execute(ctx context.Context) (err error) {
	err = s.caller("Execute", ctx, []any{}, []any{})
	return
}

type main_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that main_reflect_stub implements the weaver.Main interface.
var _ weaver.Main = (*main_reflect_stub)(nil)

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*DNSUpdateOption)(nil)

type __is_DNSUpdateOption[T ~struct {
	weaver.AutoMarshal
	ZoneName       string   "toml:\"zone_name\""
	DnsRecordNames []string "toml:\"dns_record_names\""
}] struct{}

var _ __is_DNSUpdateOption[DNSUpdateOption]

func (x *DNSUpdateOption) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("DNSUpdateOption.WeaverMarshal: nil receiver"))
	}
	enc.String(x.ZoneName)
	serviceweaver_enc_slice_string_4af10117(enc, x.DnsRecordNames)
}

func (x *DNSUpdateOption) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("DNSUpdateOption.WeaverUnmarshal: nil receiver"))
	}
	x.ZoneName = dec.String()
	x.DnsRecordNames = serviceweaver_dec_slice_string_4af10117(dec)
}

func serviceweaver_enc_slice_string_4af10117(enc *codegen.Encoder, arg []string) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.String(arg[i])
	}
}

func serviceweaver_dec_slice_string_4af10117(dec *codegen.Decoder) []string {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]string, n)
	for i := 0; i < n; i++ {
		res[i] = dec.String()
	}
	return res
}

var _ codegen.AutoMarshal = (*PageBuildEnvOption)(nil)

type __is_PageBuildEnvOption[T ~struct {
	weaver.AutoMarshal
	Enabled       bool              "toml:\"enabled\""
	GithubRelease map[string]string "toml:\"github_release\""
}] struct{}

var _ __is_PageBuildEnvOption[PageBuildEnvOption]

func (x *PageBuildEnvOption) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("PageBuildEnvOption.WeaverMarshal: nil receiver"))
	}
	enc.Bool(x.Enabled)
	serviceweaver_enc_map_string_string_219dd46d(enc, x.GithubRelease)
}

func (x *PageBuildEnvOption) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("PageBuildEnvOption.WeaverUnmarshal: nil receiver"))
	}
	x.Enabled = dec.Bool()
	x.GithubRelease = serviceweaver_dec_map_string_string_219dd46d(dec)
}

func serviceweaver_enc_map_string_string_219dd46d(enc *codegen.Encoder, arg map[string]string) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for k, v := range arg {
		enc.String(k)
		enc.String(v)
	}
}

func serviceweaver_dec_map_string_string_219dd46d(dec *codegen.Decoder) map[string]string {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make(map[string]string, n)
	var k string
	var v string
	for i := 0; i < n; i++ {
		k = dec.String()
		v = dec.String()
		res[k] = v
	}
	return res
}

var _ codegen.AutoMarshal = (*PageCleanupOption)(nil)

type __is_PageCleanupOption[T ~struct {
	weaver.AutoMarshal
	Enabled        bool "toml:\"enabled\""
	OnlyKeepLatest bool "json:\"only_keep_latest\""
}] struct{}

var _ __is_PageCleanupOption[PageCleanupOption]

func (x *PageCleanupOption) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("PageCleanupOption.WeaverMarshal: nil receiver"))
	}
	enc.Bool(x.Enabled)
	enc.Bool(x.OnlyKeepLatest)
}

func (x *PageCleanupOption) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("PageCleanupOption.WeaverUnmarshal: nil receiver"))
	}
	x.Enabled = dec.Bool()
	x.OnlyKeepLatest = dec.Bool()
}

var _ codegen.AutoMarshal = (*PagesOperations)(nil)

type __is_PagesOperations[T ~struct {
	weaver.AutoMarshal
	Cleanup  PageCleanupOption  "toml:\"cleanup\""
	BuildEnv PageBuildEnvOption "toml:\"build_env\""
}] struct{}

var _ __is_PagesOperations[PagesOperations]

func (x *PagesOperations) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("PagesOperations.WeaverMarshal: nil receiver"))
	}
	(x.Cleanup).WeaverMarshal(enc)
	(x.BuildEnv).WeaverMarshal(enc)
}

func (x *PagesOperations) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("PagesOperations.WeaverUnmarshal: nil receiver"))
	}
	(&x.Cleanup).WeaverUnmarshal(dec)
	(&x.BuildEnv).WeaverUnmarshal(dec)
}

var _ codegen.AutoMarshal = (*executorConfig)(nil)

type __is_executorConfig[T ~struct {
	weaver.AutoMarshal
	Email     string            "toml:\"email\""
	ApiKey    string            "toml:\"api_key\""
	DNSUpdate []DNSUpdateOption "toml:\"dns_update\""
	Pages     PagesOperations   "toml:\"pages\""
}] struct{}

var _ __is_executorConfig[executorConfig]

func (x *executorConfig) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("executorConfig.WeaverMarshal: nil receiver"))
	}
	enc.String(x.Email)
	enc.String(x.ApiKey)
	serviceweaver_enc_slice_DNSUpdateOption_a3196ae3(enc, x.DNSUpdate)
	(x.Pages).WeaverMarshal(enc)
}

func (x *executorConfig) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("executorConfig.WeaverUnmarshal: nil receiver"))
	}
	x.Email = dec.String()
	x.ApiKey = dec.String()
	x.DNSUpdate = serviceweaver_dec_slice_DNSUpdateOption_a3196ae3(dec)
	(&x.Pages).WeaverUnmarshal(dec)
}

func serviceweaver_enc_slice_DNSUpdateOption_a3196ae3(enc *codegen.Encoder, arg []DNSUpdateOption) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_DNSUpdateOption_a3196ae3(dec *codegen.Decoder) []DNSUpdateOption {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]DNSUpdateOption, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}
